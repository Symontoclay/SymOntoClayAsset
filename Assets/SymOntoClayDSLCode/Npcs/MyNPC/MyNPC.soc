linvar distance
{
    closely = L(0, 1);
	near = Trapezoid(0, 0.5, 5, 7);
	middle = Trapezoid(4, 5, 16, 20);
	far = S(10, 15, 20);
}

app MyNPC
{
    on Init =>
    {
		"Begin" >> @>log;
        go();
	    "End" >> @>log;
    }
}

action Go
{
    op () => 
	{
	    @@host.`go`(to: #@[50]);
	}
	
	on {: see(I, $x) & $x is barrel & distance(I, $x, $y) & $y is near :} ($y >> @y, $x >> @x) => 
	{
	    "I see" >> @>log;
		@x >> @>log;
		@y >> @>log;
		complete action;
	}
}

/*
	on {: see(I, $x) & barrel($x) & distance(I, $x, $y) :} ($y >> @y, $x >> @x) => 
	{
	    "I see" >> @>log;
		@x >> @>log;
		@y >> @>log;
		complete action;
	}
*/

/*
	on {: see(I, $x) & barrel($x) :} ($x >> @x) => 
	{
	    "I see" >> @>log;
		@x >> @>log;
		complete action;
	}
	
	on {: see(I, barrel) :} => 
	{
	    "It is barrel!" >> @>log;
		//@@host.`go`(to: #@[20, 180]);
	//	complete action;
	}
	
	on {: distance(I, barrel, $y) :}($y >> @y) => 
	{
	    "It is barrel (2) !" >> @>log;
		@y >> @>log;
		//@@host.`go`(to: #@[20, 180]);
	//	complete action;
	}
*/